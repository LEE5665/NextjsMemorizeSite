generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String?       @unique
  name           String?
  image          String?
  password       String?
  emailVerified  DateTime?
  quizSets       QuizSet[]
  folders        Folder[]
  progresses     QuizProgress[] // 추가
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  type               String?
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Folder {
  id        Int       @id @default(autoincrement())
  name      String
  creator   User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  quizSets  QuizSet[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model QuizSet {
  id         Int           @id @default(autoincrement())
  title      String
  creator    User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId  String
  folder     Folder?       @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId   Int?
  type       QuizType      @default(WORD)
  isPublic   Boolean       @default(false)
  questions  Question[]
  progresses QuizProgress[] // 추가
  // progress   Json?   // <-- 삭제!

  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now()) @updatedAt
}

model Question {
  id        Int      @id @default(autoincrement())
  content   String
  answer    String
  quizSet   QuizSet  @relation(fields: [quizSetId], references: [id], onDelete: Cascade)
  quizSetId Int
  createdAt DateTime @default(now())
}

model QuizProgress {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  quizSet   QuizSet  @relation(fields: [quizSetId], references: [id], onDelete: Cascade)
  quizSetId Int
  type      String   // 'CHOICE', 'SHORT', 'REVERSE_CHOICE', 'REVERSE_SHORT'
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, quizSetId, type])
}

enum QuizType {
  WORD
  QA
}
